scale_y_log10()
qplot(seq_along(nn.pca.all$sdev), nn.pca.all$sdev) +
#qplot(seq_along(nn.pca.c1.1$sdev), nn.pca.c1.1$sdev) +
scale_y_log10()
qplot(seq_along(nn.pca.c1.1$sdev), nn.pca.c1.1$sdev) +
scale_y_log10()
qplot(seq_along(nn.pca.c1.1$sdev), nn.pca.c1.1$sdev) +
scale_y_log10()
qplot(seq_along(nn.pca.all$sdev), nn.pca.all$sdev) +
#qplot(seq_along(nn.pca.c1.1$sdev), nn.pca.c1.1$sdev) +
scale_y_log10()
qplot(seq_along(nn.pca.c1.1$sdev), nn.pca.c1.1$sdev) +
scale_y_log10()
colSums(nn.pca.c1.1$rotation)
rowSums(nn.pca.c1.1$rotation)
rot.squared <- mapply(nn.pca.c1.1, ^2)
rot.squared <- mapply(nn.pca.c1.1, square)
square(2)
squared(2)
2**2
rot.squared <- mapply(nn.pca.c1.1, **2)
rot.squared <- mapply(nn.pca.c1.1, '**2')
rot.squared <- mapply(nn.pca.c1.1, **2)
rot.squared <- nn.pca.c1.1**2
rot.squared <- nn.pca.c1.1.**2
rot.squared <- nn.pca.c1.1 * nn.pca.c1.1
rot.squared <- nn.pca.c1.1 * nn.pca.c1.1
nn.pca.c1.1 * nn.pca.c1.1
rot.squared <- nn.pca.c1.1$rot ** 2
colSums(nn.pca.c1.1$rotation)
rot.squared <- nn.pca.c1.1$rot ** 2
colSums(rot.squared)
rowSums(rot.squared)
PCAComponentPlot <- function(data, ncols){
rows = rowSums(rot.squared[1:10])
qplot(seq_along(rows), rows)
}
PCAComponentPlot <- function(data, ncols){
rows = rowSums(rot.squared[1:ncols])
qplot(seq_along(rows), rows)
}
PCAComponentPlot(rot.sqaured, 10)
qplot(seq_along(rows), rows)
rows = rowSums(rot.squared[1:ncols,])
cççç
rows = rowSums(data[1:ncols,])
PCAComponentPlot <- function(data, ncols){
qplot(seq_along(rows), rows)
}
PCAComponentPlot <- function(data, ncols){
rows = rowSums(data[,1:ncols])
qplot(seq_along(rows), rows)
}
PCAComponentPlot(rot.squared, 10)
library(maps)
library(ggplot2)
library(dplyr)
library(reshape2)
library(RANN)
library(proxy)
PCAComponentPlot(rot.squared, 10)
PCAComponentPlot <- function(data, ncols){
rows = rowSums(data[,1:ncols]) ** .5
qplot(seq_along(rows), rows)
}
PCAComponentPlot(rot.squared, 10)
PCAComponentPlot(rot.squared, 20)
PCAComponentPlot(rot.squared, 25)
PCAComponentPlot(rot.squared, 20)
PCAComponentPlot(rot.squared, 50)
PCAComponentPlot(rot.squared, 70)
PCAComponentPlot(rot.squared, 200)
PCAComponentPlot(rot.squared, 250)
PCAComponentPlot(rot.squared, 150)
PCAComponentPlot(rot.squared, 300)
PCAComponentPlot(rot.squared, 350)
PCAComponentPlot(rot.squared, 400)
PCAComponentPlot(rot.squared, 200)
PCAComponentPlot(rot.squared, 100)
PCAComponentPlot(rot.squared, 1)
PCAComponentPlot(rot.squared, 2)
CenteredPCA <- function(data, cols){
center <- data[,cols] - colMeans(data[,cols])
return(prcomp(center))
}
nn.pca.all <- CenteredPCA(filter(spatial.nn.bin.copy),
ling.ans)
nn.pca.c1.1 <- CenteredPCA(filter(spatial.nn.bin.copy, cluster2 == 1)
,ling.ans)
CenteredPCA <- function(data, cols){
center <- data[,cols] - colMeans(data[,cols])
return(prcomp(center))
}
PCAComponentPlot <- function(data, ncols){
squared = data[,1:ncols] ** 2
rows = rowSums(squared)** .5
qplot(seq_along(rows), rows)
}
PCAComponentPlot(nn.pca.c1.1$rot, 2)
PCAComponentPlot(nn.pca.c1.1$rot, 10)
PCAComponentPlot(nn.pca.all$rot, 10)
PCAComponentPlot(nn.pca.c1.1$rot, 10)
PCAComponentPlot <- function(data, ncols,end=FALSE){
if (end){
squared = data[,ncol(data)-ncols:ncol(data)] ** 2
}
else{
squared = data[,1:ncols] ** 2
}
rows = rowSums(squared)** .5
qplot(seq_along(rows), rows)
}
PCAComponentPlot(nn.pca.c1.1$rot, 10,end=TRUE)
ncol(data)-ncols
ncol(nn.pca.c1.1$rot)
ncol(nn.pca.c1.1$rot-10)
nn.pca.c1.1$rot[468-10:468
nn.pca.c1.1$rot[468-10:468]
nn.pca.c1.1$rot[468-10:468]
nn.pca.c1.1$rot[,468-10:468]
nn.pca.c1.1$rot[,468-10:468]
head(nn.pca.c1.1$rot[,468-10:468])
head(nn.pca.c1.1$rot[,(468-10):468])
PCAComponentPlot <- function(data, ncols,end=FALSE){
if (end){
squared = data[,(ncol(data)-ncols):ncol(data)] ** 2
}
else{
squared = data[,1:ncols] ** 2
}
rows = rowSums(squared)** .5
qplot(seq_along(rows), rows)
}
PCAComponentPlot(nn.pca.c1.1$rot, 10,end=TRUE)
PCAComponentPlot(nn.pca.c1.1$rot, 100,end=TRUE)
PCAComponentPlot(nn.pca.c1.1$rot, 10,end=FALSE)
PCAComponentPlot(nn.pca.c1.1$rot, 10,end=TRUE)
PCAComponentPlot(nn.pca.c1.1$rot, 40,end=TRUE)
PCAComponentPlot(nn.pca.c1.1$rot, 60,end=TRUE)
PCAComponentPlot(nn.pca.all$rot, 60,end=TRUE)
PCAComponentPlot(nn.pca.all$rot, 10,end=TRUE)
PCAComponentPlot(nn.pca.all$rot, 5,end=TRUE)
PCAComponentPlot(nn.pca.all$rot, 2,end=TRUE)
5
PCAComponentPlot(nn.pca.all$rot, 5,end=TRUE)
qplot(seq_along(nn.pca.c1.1$sdev), nn.pca.c1.1$sdev) +
scale_y_log10()
qplot(seq_along(nn.pca.all$sdev), nn.pca.c1.1$sdev) +
scale_y_log10()
PCAComponentPlot <- function(data, ncols,end=FALSE){
if (end){
squared = data[,(ncol(data)-ncols):ncol(data)] ** 2
}
else{
squared = data[,1:ncols] ** 2
}
if (ncols > 1){
rows = rowSums(squared)** .5
}
else if (ncols == 1){
rows = squared ** .5
}
qplot(seq_along(rows), rows)
}
PCAComponentPlot(nn.pca.all$rot, 5,end=TRUE)
PCAComponentPlot(nn.pca.all$rot, 1,end=TRUE)
PCAComponentPlot(nn.pca.all$rot, 1,end=TRUE)
PCAComponentPlot <- function(data, ncols,end=FALSE){
if (end){
squared = data[,(ncol(data)-ncols):ncol(data)] ** 2
}
else{
squared = data[,1:ncols] ** 2
}
if (ncols > 1){
rows = rowSums(squared)** .5
}
else if (ncols == 1){
rows = squared[,1] ** .5
}
qplot(seq_along(rows), rows)
}
PCAComponentPlot(nn.pca.all$rot, 1,end=TRUE)
PCAComponentPlot(nn.pca.all$rot, 2,end=TRUE)
PCAComponentPlot(nn.pca.all$rot, 1,end=TRUE)
PCAComponentPlot(nn.pca.all$rot, 2,end=TRUE)
PCAComponentPlot(nn.pca.all$rot, 4,end=TRUE)
PCAComponentPlot <- function(data, ncols,end=FALSE){
if (end){
squared = data[,(ncol(data)-ncols):ncol(data)] ** 2
}
else{
squared = data[,1:ncols] ** 2
}
qplot(squared,geom='bar')
if (ncols > 1){
rows = rowSums(squared)** .5
}
else if (ncols == 1){
rows = squared[,1] ** .5
}
#qplot(seq_along(rows), rows)
}
PCAComponentPlot(nn.pca.all$rot, 4,end=TRUE)
PCAComponentPlot(nn.pca.all$rot, 4,end=TRUE)
squared <- nn.pca.all$rot[,1:15]
squared.dframe <- data.frame(squared)
View(squared.dframe)
View(squared.dframe)
squared.dframe$ID <- names(squared.dframe)
squared.dframe$ID <- row.names(squared.dframe)
View(squared.dframe)
squared.dframe <- melt(squared.dframe, eigenvec =
names(squared.dframe)[names(squared.dframe) != 'ID'])
View(squared.dframe)
squared.dframe <- melt(squared.dframe, eigenvec =
names(squared.dframe)[names(squared.dframe) != 'ID']
variable.name='eigenvec')
squared.dframe <- melt(squared.dframe, eigenvec =
names(squared.dframe)[names(squared.dframe) != 'ID'],
variable.name='eigenvec')
View(squared.dframe)
library(reshape2)
squared.dframe <- data.frame(squared)
squared.dframe$ID <- row.names(squared.dframe)
squared.dframe <- melt(squared.dframe, eigenvec =
names(squared.dframe)[names(squared.dframe) != 'ID'],
variable.name='eigenvec')
View(squared.dframe)
ggplot(squared,aes(x=ID,fill=eigenvec)) + geom_bar()
ggplot(squared.dframe,aes(x=ID,fill=eigenvec)) + geom_bar()
ggplot(squared.dframe,aes(x=ID,y=value,fill=eigenvec)) + geom_bar()
ggplot(squared.dframe,aes(x=ID,y=value,fill=eigenvec)) + geom_bar(stat='identity')
squared <- nn.pca.all$rot[,1:15] ** 2
squared.dframe <- data.frame(squared)
squared.dframe$ID <- row.names(squared.dframe)
squared.dframe <- melt(squared.dframe, eigenvec =
names(squared.dframe)[names(squared.dframe) != 'ID'],
variable.name='eigenvec')
ggplot(squared.dframe,aes(x=ID,y=value,fill=eigenvec)) + geom_bar(stat='identity')
ggplot(squared.dframe,aes(x=ID,y=value,fill=eigenvec)) +
geom_bar(stat='identity') +
scale_fill_brewer(palette='Set1')
ggplot(squared.dframe,aes(x=ID,y=value,fill=eigenvec)) +
geom_bar(stat='identity')
squared <- nn.pca.all$rot[,1:10] ** 2
squared <- squared * (rowSums(squared) ** 2)
squared.dframe <- data.frame(squared)
squared.dframe$ID <- row.names(squared.dframe)
squared.dframe <- melt(squared.dframe, eigenvec =
names(squared.dframe)[names(squared.dframe) != 'ID'],
variable.name='eigenvec')
squared <- squared * (rowSums(squared) / rowSums(squared**.5) ** 2)
squared.dframe <- data.frame(squared)
squared <- nn.pca.all$rot[,1:10] ** 2
squared <- squared * (rowSums(squared) / rowSums(squared**.5) ** 2)
squared.dframe <- data.frame(squared)
squared.dframe$ID <- row.names(squared.dframe)
squared.dframe <- melt(squared.dframe, eigenvec =
names(squared.dframe)[names(squared.dframe) != 'ID'],
variable.name='eigenvec')
squared <- nn.pca.all$rot[,1:10] ** 2
squared <- squared * (rowSums(squared) / rowSums(squared**.5) ** 2)
squared.dframe <- data.frame(squared)
squared.dframe$ID <- row.names(squared.dframe)
squared.dframe <- melt(squared.dframe, eigenvec =
names(squared.dframe)[names(squared.dframe) != 'ID'],
variable.name='eigenvec')
ggplot(squared.dframe,aes(x=ID,y=value,fill=eigenvec)) +
geom_bar(stat='identity')
squared <- nn.pca.all$rot[,1:20] ** 2
squared <- squared * (rowSums(squared) / rowSums(squared**.5) ** 2)
squared.dframe <- data.frame(squared)
squared.dframe$ID <- row.names(squared.dframe)
squared.dframe <- melt(squared.dframe, eigenvec =
names(squared.dframe)[names(squared.dframe) != 'ID'],
variable.name='eigenvec')
ggplot(squared.dframe,aes(x=ID,y=value,fill=eigenvec)) +
geom_bar(stat='identity')
PCAComponentPlot(nn.pca.all$rot, 4,end=TRUE)
PCAComponentPlot <- function(data, ncols,end=FALSE){
if (end){
squared = data[,(ncol(data)-ncols):ncol(data)] ** 2
}
else{
squared = data[,1:ncols] ** 2
}
squared <- squared * (rowSums(squared) / rowSums(squared**.5) ** 2)
squared.dframe <- data.frame(squared)
squared.dframe$ID <- row.names(squared.dframe)
squared.dframe <- melt(squared.dframe, eigenvec =
names(squared.dframe)[names(squared.dframe) != 'ID'],
variable.name='eigenvec')
ggplot(squared.dframe,aes(x=ID,y=value,fill=eigenvec)) +
geom_bar(stat='identity')
}
PCAComponentPlot(nn.pca.all$rot, 4,end=TRUE)
PCAComponentPlot(nn.pca.all$rot, 10,end=TRUE)
PCAComponentPlot <- function(data, ncols,end=FALSE){
if (end){
squared = data[,(ncol(data)-ncols):ncol(data)] ** 2
}
else{
squared = data[,1:ncols] ** 2
}
squared <- squared * (rowSums(squared) / rowSums(squared**.5) ** 2)
squared <- squared ** .5
squared.dframe <- data.frame(squared)
squared.dframe$ID <- row.names(squared.dframe)
squared.dframe <- melt(squared.dframe, eigenvec =
names(squared.dframe)[names(squared.dframe) != 'ID'],
variable.name='eigenvec')
ggplot(squared.dframe,aes(x=ID,y=value,fill=eigenvec)) +
geom_bar(stat='identity')
}
PCAComponentPlot(nn.pca.all$rot, 10,end=TRUE)
PCAComponentPlot(nn.pca.all$rot, 5,end=TRUE)
PCAComponentPlot(nn.pca.c1.1$rot, 5,end=TRUE)
PCAComponentPlot(nn.pca.all$rot, 5,end=TRUE)
PCAComponentPlot(nn.pca.all$rot, 5,end=FALSE)
PCAComponentPlot(nn.pca.all$rot, 5,end=TRUE)
PCAComponentPlot(nn.pca.all$rot, 20,end=TRUE)
ggplot(spatial.nn.bin) +
geom_point(aes(x=long,y=lat,color=Q050.4), shape=7) +
plot.map +
plot.blank
ggplot(spatial.nn.bin.copy) +
geom_point(aes(x=long,y=lat,color=cluster4), shape=15, size = 4, alpha=.6) +
plot.map +
plot.blank +
scale_color_brewer(palette = 'Set3')
ggplot(spatial.nn.bin.copy) +
geom_point(aes(x=long,y=lat,color=cluster5), shape=15, size = 4, alpha=.6) +
plot.map +
plot.blank +
scale_color_brewer(palette = 'Set3')
ggplot(spatial.nn.bin.copy) +
geom_point(aes(x=long,y=lat,color=cluster6), shape=15, size = 4, alpha=.6) +
plot.map +
plot.blank +
scale_color_brewer(palette = 'Set3')
View(ling.data.bin)
View(ling.location)
View(spatial.nn.bin)
View(squared.dframe)
View(ling.data)
View(spatial.nn.bin)
source('jhaberstroh_ling_methods.R')
source('jhaberstroh_ling_methods.R')
SeguyDist <- function(data) dist(data, method=function(x, y)  sum(x!=y))
SeguyDist <- function(data) dist(data, method=function(x, y)  sum(x!=y))
ling.ans <- ling.data[!names(ling.data) %in% c('ID', 'CITY','STATE','ZIP','lat','long')]
n.sample <- 100
ling.data.hclust <- ling.data.filter[sample(nrow(ling.data),n.sample), ]
ling.data.hclust <- ling.data[sample(nrow(ling.data),n.sample), ]
ling.data.hclust <- ApplyHClust(ling.data.sample, dist_method=SeguyDist, cluster.cols=ling.ans)
source('jhaberstroh_ling_methods.R')
ling.data <- ling.data[complete.cases(ling.data), ]
ling.ans <- ling.data[!names(ling.data) %in% c('ID', 'CITY','STATE','ZIP','lat','long')]
n.sample <- 100
ling.data.hclust <- ling.data[sample(nrow(ling.data),n.sample), ]
ling.data.hclust <- ApplyHClust(ling.data.sample, dist_method=SeguyDist, cluster.cols=ling.ans)
ling.data.hclust <- ApplyHClust(ling.data.hclust,
dist_method=SeguyDist,
cluster.cols=ling.ans)
clusters <- hclust(SeguyDist(ling.data.hclust[,ling.ans]))
ling.ans
ling.ans <- names(ling.data)[!names(ling.data) %in% c('ID', 'CITY','STATE','ZIP','lat','long')]
ling.ans
clusters <- hclust(SeguyDist(ling.data.hclust[,ling.ans]))
ling.data.hclust <- ApplyHClust(ling.data.hclust,
dist_method=SeguyDist,
cluster.cols=ling.ans)
remove(clusters)
n.sample <- 2000
ling.data.hclust <- ling.data[sample(nrow(ling.data),n.sample), ]
ling.data.hclust <- ApplyHClust(ling.data.hclust,
dist_method=SeguyDist,
cluster.cols=ling.ans)
ggplot(ling.data.hclust, aes(x=long, y=lat, color=cluster4)) +
geom_point()
ggplot(ling.data.hclust, aes(x=long, y=lat, color=cluster8)) +
geom_point()
ling.data.mainland <- filter(ling.data, -65 > long & long > -125 & 50 > lat & lat > 25)
ling.data.hclust <- ling.data[sample(nrow(ling.data),n.sample), ]
ling.data.hclust <- ApplyHClust(ling.data.hclust,
dist_method=SeguyDist,
cluster.cols=ling.ans)
ggplot(ling.data.hclust, aes(x=long, y=lat, color=cluster8)) +
geom_point()
ggplot(ling.data.hclust, aes(x=long, y=lat, color=cluster8)) +
geom_point(alpha=.5)
ggplot(ling.data.hclust, aes(x=long, y=lat, color=cluster3)) +
geom_point(alpha=.5)
ggplot(ling.data.hclust, aes(x=long, y=lat, color=cluster5)) +
geom_point(alpha=.5)
ling.data.hclust <- ling.data.mainland[sample(nrow(ling.data.mainland),n.sample), ]
ling.data.hclust <- ApplyHClust(ling.data.hclust,
dist_method=SeguyDist,
cluster.cols=ling.ans)
ggplot(ling.data.hclust, aes(x=long, y=lat, color=cluster5)) +
geom_point(alpha=.5)
ggplot(ling.data.hclust, aes(x=long, y=lat, color=cluster5)) +
geom_point(alpha=.8)
ggplot(ling.data.hclust, aes(x=long, y=lat, color=cluster5)) +
geom_point(alpha=.8) +
color_fill_brewer('Set1')
ggplot(ling.data.hclust, aes(x=long, y=lat, color=cluster5)) +
geom_point(alpha=.8) +
scale_fill_brewer('Set1')
ggplot(ling.data.hclust, aes(x=long, y=lat, color=cluster5)) +
geom_point(alpha=.8) +
scale_fill_brewer('Set3')
ggplot(ling.data.hclust, aes(x=long, y=lat, color=cluster5)) +
geom_point(alpha=.8) +
scale_color_brewer('Set3')
ggplot(ling.data.hclust, aes(x=long, y=lat, color=cluster5)) +
geom_point(alpha=.8) +
scale_color_brewer('Set1')
ggplot(ling.data.hclust, aes(x=long, y=lat, fill=cluster5)) +
geom_point(alpha=.8) +
scale_fill_brewer('Set1')
ggplot(ling.data.hclust, aes(x=long, y=lat, color=cluster5)) +
geom_point(alpha=.8) +
scale_color_brewer(palette = 'Set3')
ggplot(ling.data.hclust, aes(x=long, y=lat, color=cluster5)) +
geom_point(alpha=.8) +
scale_color_brewer(palette = 'Set1')
n.sample <- 4000
ling.data.mainland <- filter(ling.data, -65 > long & long > -125 & 50 > lat & lat > 25)
ling.data.hclust <- ling.data.mainland[sample(nrow(ling.data.mainland),n.sample), ]
ling.data.hclust <- ApplyHClust(ling.data.hclust,
dist_method=SeguyDist,
cluster.cols=ling.ans)
ggplot(ling.data.hclust, aes(x=long, y=lat, color=cluster5)) +
geom_point(alpha=.8) +
scale_color_brewer(palette = 'Set1')
ggplot(ling.data.hclust, aes(x=long, y=lat, color=cluster8)) +
geom_point(alpha=.8) +
scale_color_brewer(palette = 'Set1')
ling.data.bin.mainland.latlongagg <- group_by(ling.data.bin.mainland, lat, long) %>%
summarize(n=n())
ling.data.bin.mainland <- filter(ling.data.bin, lat < 53 & long > -140)
ling.data.bin.mainland.latlongagg <- group_by(ling.data.bin.mainland, lat, long) %>%
summarize(n=n())
max = head(ling.data.bin.mainland.latlongagg[
with(ling.data.bin.mainland.latlongagg, order(-n)),],20)
ggplot(data=NULL) +
plot.map +
plot.blank +
geom_point(data=max, aes(x=long, y=lat), size=3, alpha=0.5)
max
ggplot(data=NULL) +
plot.map +
plot.blank +
geom_point(data=max, aes(x=long, y=lat, color=max), size=3, alpha=0.5)
max
geom_point(data=max, aes(x=long, y=lat, color=m), size=3, alpha=0.5)
ggplot(data=NULL) +
plot.map +
plot.blank +
geom_point(data=max, aes(x=long, y=lat, color=m), size=3, alpha=0.5)
ggplot(data=NULL) +
plot.map +
plot.blank +
geom_point(data=max, aes(x=long, y=lat, color=n), size=3, alpha=0.5)
ggplot(data=NULL) +
plot.map +
plot.blank +
geom_point(data=max, aes(x=long, y=lat, color=n), size=3, alpha=.9)
max = head(ling.data.bin.mainland.latlongagg[
with(ling.data.bin.mainland.latlongagg, order(-n)),],100)
ggplot(data=NULL) +
plot.map +
plot.blank +
geom_point(data=max, aes(x=long, y=lat, color=n), size=3, alpha=.9)
ggplot(spatial.nn.bin.copy) +
geom_point(aes(x=long,y=lat,color=cluster6), shape=15, size = 4, alpha=.6) +
plot.map +
plot.blank +
scale_color_brewer(palette = 'Set3')
sdevs <- data.frame(nn.pca.c1.1$sdev)
View(sdevs)
sdevs <- data.frame(value=nn.pca.c1.1$sdev)
View(sdevs)
sdevs$ID <- row.names(sdevs)
View(sdevs)
ling.ans <- names(ling.data)[!(names(ling.data) %in% ling.identify)]
nn.pca.c6.3 <- CenteredPCA(filter(spatial.nn.bin.copy, cluster6 == 3),ling.ans)
View(spatial.nn.bin.copy)
filter(spatial.nn.bin.copy, cluster6 == 3
)
filter(spatial.nn.bin.copy, cluster6 == 3)[,ling.ans]
filter(spatial.nn.bin.copy, cluster6 == 3)
filter(spatial.nn.bin.copy, cluster6 == 3)[,ling.ans]
ling.ans
ling.ans <- names(spatial.nn.bin)[!(names(ling.data) %in% ling.identify)]
nn.pca.c6.3 <- CenteredPCA(filter(spatial.nn.bin.copy, cluster6 == 3),ling.ans)
save(spatial.nn.bin, spatial.nn.bin.copy, file='hclust_file.Rda')
View(ling.data.bin)
nn.pca.c6.3 <- CenteredPCA(filter(spatial.nn.bin.copy, cluster6 == 3),ling.ans)
sdevs <- data.frame(value=nn.pca.c6.3$sdev)
sdevs$ID <- row.names(sdevs)
p1 <- ggplot(sdevs, aes(x=ID,y=value)) +
geom_point()
p1
plot(nn.pca.c6.3$sdev)
p1 <- qplot(seq_along(nn.pca.c6.3$sdev), nn.pca.c6.3$sdev)
p1
p1 <- qplot(seq_along(nn.pca.c6.3$sdev), nn.pca.c6.3$sdev) +
scale_y_log10()
p1
