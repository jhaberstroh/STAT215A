\batchmode
\makeatletter
\def\input@path{{/Users/Adam/Dropbox/Stat215A-2013/Labs/Lab2/Lab//}}
\makeatother
\documentclass[english]{article}\usepackage{graphicx, color}
%% maxwidth is the original width if it is less than linewidth
%% otherwise use linewidth (to make sure the graphics do not exceed the margin)
\makeatletter
\def\maxwidth{ %
  \ifdim\Gin@nat@width>\linewidth
    \linewidth
  \else
    \Gin@nat@width
  \fi
}
\makeatother

\IfFileExists{upquote.sty}{\usepackage{upquote}}{}
\definecolor{fgcolor}{rgb}{0.2, 0.2, 0.2}
\newcommand{\hlnumber}[1]{\textcolor[rgb]{0,0,0}{#1}}%
\newcommand{\hlfunctioncall}[1]{\textcolor[rgb]{0.501960784313725,0,0.329411764705882}{\textbf{#1}}}%
\newcommand{\hlstring}[1]{\textcolor[rgb]{0.6,0.6,1}{#1}}%
\newcommand{\hlkeyword}[1]{\textcolor[rgb]{0,0,0}{\textbf{#1}}}%
\newcommand{\hlargument}[1]{\textcolor[rgb]{0.690196078431373,0.250980392156863,0.0196078431372549}{#1}}%
\newcommand{\hlcomment}[1]{\textcolor[rgb]{0.180392156862745,0.6,0.341176470588235}{#1}}%
\newcommand{\hlroxygencomment}[1]{\textcolor[rgb]{0.43921568627451,0.47843137254902,0.701960784313725}{#1}}%
\newcommand{\hlformalargs}[1]{\textcolor[rgb]{0.690196078431373,0.250980392156863,0.0196078431372549}{#1}}%
\newcommand{\hleqformalargs}[1]{\textcolor[rgb]{0.690196078431373,0.250980392156863,0.0196078431372549}{#1}}%
\newcommand{\hlassignement}[1]{\textcolor[rgb]{0,0,0}{\textbf{#1}}}%
\newcommand{\hlpackage}[1]{\textcolor[rgb]{0.588235294117647,0.709803921568627,0.145098039215686}{#1}}%
\newcommand{\hlslot}[1]{\textit{#1}}%
\newcommand{\hlsymbol}[1]{\textcolor[rgb]{0,0,0}{#1}}%
\newcommand{\hlprompt}[1]{\textcolor[rgb]{0.2,0.2,0.2}{#1}}%

\usepackage{framed}
% \makeatletter
% \newenvironment{kframe}{%
%  \def\at@end@of@kframe{}%
%  \ifinner\ifhmode%
%   \def\at@end@of@kframe{\end{minipage}}%
%   \begin{minipage}{\columnwidth}%
%  \fi\fi%
%  \def\FrameCommand##1{\hskip\@totalleftmargin \hskip-\fboxsep
%  \colorbox{shadecolor}{##1}\hskip-\fboxsep
%      % There is no \\@totalrightmargin, so:
%      \hskip-\linewidth \hskip-\@totalleftmargin \hskip\columnwidth}%
%  \MakeFramed {\advance\hsize-\width
%    \@totalleftmargin\z@ \linewidth\hsize
%    \@setminipage}}%
%  {\par\unskip\endMakeFramed%
%  \at@end@of@kframe}
% \makeatother

\definecolor{shadecolor}{rgb}{.97, .97, .97}
\definecolor{messagecolor}{rgb}{0, 0, 0}
\definecolor{warningcolor}{rgb}{1, 0, 1}
\definecolor{errorcolor}{rgb}{1, 0, 0}
% \newenvironment{knitrout}{}{} % an empty environment to be redefined in TeX

\usepackage{alltt}
\usepackage[T1]{fontenc}
\usepackage[latin9]{inputenc}
\usepackage{geometry}
\geometry{verbose,tmargin=1in,bmargin=1in,lmargin=1in,rmargin=1in}
\usepackage{fancyhdr}
\pagestyle{fancy}
\setlength{\parskip}{\smallskipamount}
\setlength{\parindent}{0pt}
\usepackage{amsthm}
\usepackage{amsmath}

\makeatletter

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% LyX specific LaTeX commands.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Textclass specific LaTeX commands.
\numberwithin{equation}{section}
\numberwithin{figure}{section}

\@ifundefined{date}{}{\date{}}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% User specified LaTeX commands.
\pagestyle{empty} 

\makeatother

\usepackage{babel}
\begin{document}

\title{Lab 2 - Linguistic Survey\\
Stat 215A, Fall 2013}


\author{Your name}

\maketitle

\section{Kernel Density}

<<read_library, cache=FALSE, echo=FALSE, results=FALSE, warning=FALSE, message=FALSE>>=
library(knitr)
library(ggplot2)
library(dplyr)
library(grid)
library(graphics)
load("redwood_data/log.Rda")
load('redwood_data/net.Rda')
load('redwood_data/locs.Rda')
locs <- filter(locs, V1 !="ID") %>%  
  transform(V1 = as.numeric(V1), V2=as.numeric(V2)) %>% 
  arrange(V1,V2)
colnames(locs) <- c("nodeid", "height.m","direction","distance","tree")

multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
  require(grid)

  # Make a list from the ... arguments and plotlist
  plots <- c(list(...), plotlist)

  numPlots = length(plots)

  # If layout is NULL, then use 'cols' to determine layout
  if (is.null(layout)) {
    # Make the panel
    # ncol: Number of columns of plots
    # nrow: Number of rows needed, calculated from # of cols
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
                    ncol = cols, nrow = ceiling(numPlots/cols))
  }

 if (numPlots==1) {
    print(plots[[1]])

  } else {
    # Set up the page
    grid.newpage()
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))

    # Make each plot, in the correct location
    for (i in 1:numPlots) {
      # Get the i,j matrix positions of the regions that contain this subplot
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))

      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
                                      layout.pos.col = matchidx$col))
    }
  }
}
@

<<clean_log, cache=FALSE, echo=FALSE, message=FALSE>>=
# # Give each row an identifier that specifies which dataset it came from
# log$dset <- 'log'
# # Convert time from POSIXlt to POSIXct
# log$result_time <- as.POSIXlt( as.POSIXct(log$result_time) + 300 * log$epoch )
# log$time.dmin <- log$result_time$hour * 60 + log$result_time$min
# log$time.day <- log$result_time$yday
# log$time.year <- log$result_time$year
# log$time.isdst <- log$result_time$isdst
# drops <- c("result_time")
# log <- log[,!(names(log) %in% drops)]
# remove(drops)
# # Merge location data into log
load('redwood_data/log1.Rda')
log <- inner_join(log, locs)

# ====== clean log, complex
# Clean for negative humidities (and NA humidies, none present in log)
node.bad.all <- unique( filter(log, !(humid_temp > 0)) %>% select(nodeid) )
# Clean for NA's in humidity and temperature (node 15)
node.bad.days<- unique( filter(log, is.na(humidity) | is.na(humid_temp)) %>% 
                          select(nodeid, time.day) )
# Clean for bad HAMATOP points (day 314)
node.bad.days<- rbind(node.bad.days,
                      unique( filter(log, time.day < 315) %>%
                          select(nodeid,time.day)) )

# Trim data that goes partway through day 343 (day of death), except in nodes that carry on.
time.day.last <- 343
node.good.long <- unique( filter(log, time.day == 344) %>% select(nodeid) )

# Apply cleaning filters
log <- filter(log, (time.day < time.day.last) | 
                      (nodeid %in% node.good.long$nodeid))
log <- anti_join(log, node.bad.all , by=c('nodeid'))
log <- anti_join(log, node.bad.days, by=c('nodeid', 'time.day'))

log.interior <- filter(log, tree=='interior')
log.edge <- filter(log, tree=='edge')
@


<<temp_kernel, cache=FALSE, echo=FALSE,dpi=100, fig.cap='Density plots with varying bandwidth', fig.height=5, fig.width=6 >>=
p1 <- ggplot(log.edge, aes(x=humid_temp)) +
  geom_density(kernel='epanechnikov', bw=1) +
  ggtitle("KDA with default bandwidth")
p2 <- ggplot(log.edge, aes(x=humid_temp)) +
  geom_density(kernel='epanechnikov', adjust=.2) +
  ggtitle("KDA with adjust = 1/5")
p3 <- ggplot(log.edge, aes(x=humid_temp)) +
  geom_density(kernel='epanechnikov', adjust=.05) +
  ggtitle("KDA with adjust = 1/20")
multiplot(p1,p2,p3,cols=1)
@

The kernel density, as we vary the bandwidth, shows characteristic signatures depending on the bandwith of choice. At the large bandwidth end, we see four peaks, with the central two peaks blurring together. At the small bandwidth end, there is a strong signal that shows up at about 15 degrees, perhaps signalling problems in our dataset.

For exploring loess smoothing, I used a few parameters for the smoothers and looked at a set of data from 1:20pm - 2:00pm over every available day. The result was that, across the board, the higher-order fit required a larger bandwidth for stability.

<<temp_humid_slicer, cache=FALSE, warning=FALSE, error=FALSE, echo=FALSE,dpi=100, fig.cap='Analysis of humidity/temperature correlation across all days, 1:20pm-2:00pm', fig.height=6, fig.width=6 >>=
same_time <- filter(log.edge, time.dmin >=800 & time.dmin <= 840)
p11 <- ggplot(same_time, aes(humid_temp, humidity)) +
  stat_smooth(method='loess', span=.3, formula = y ~ poly(x,1)) +
  geom_point(alpha=.01) +
  ggtitle("Linear fit with bandwidth .3")
p12 <- ggplot(same_time, aes(humid_temp, humidity)) +
  stat_smooth(method='loess', span=5, formula = y ~ poly(x,1)) +
  geom_point(alpha=.01) +
  ggtitle("Linear fit with bandwidth 5")
p21 <- ggplot(same_time, aes(humid_temp, humidity)) +
  stat_smooth(method='loess', span=.3, formula = y ~ poly(x,3)) +
  geom_point(alpha=.01)  +
  ggtitle('Cubic fit with bandwith .3 (unstable)')
p22 <- ggplot(same_time, aes(humid_temp, humidity)) +
  stat_smooth(method='loess', span=5, formula = y ~ poly(x,3)) +
  geom_point(alpha=.01)  +
  ggtitle('Cubic fit with bandwith 5')

multiplot(p11,p12,p21,p22,cols=2)
@

\section{Introduction}

In the study of dialects, there is a long-standing connundrum about the relation of regional dialects and spatial distribution of particular linguistic choices. While it is evidently possible to qualitatively identify a person's regional dialect in practice, the analysis of any particular linguistic choice does not generate these boundaries. Here, we attempt to take the "blind" approach: to use extensive data across multiple linguistic features to generate those boundaries that are spatially pertinent, without explicit reference to the boundaries themselves.



\section{The Data}


\subsection{Data quality and cleaning}

This dataset isn't as bad as the redwood data, but there are still
some issues. You should discuss them here and describe your strategies
for dealing with them.


\subsection{Exploratory Data Analysis}

This is where you compare pairs of questions with discussion and plots.


\section{Dimension reduction methods}

This is where you discuss and show plots about the results of whatever
dimension reduction techniques you tried - PCA, hierarchical clustering,
K-means, random projections, etc.


\section{Stability of findings to perturbation}


\section{Conclusion}
\end{document}
